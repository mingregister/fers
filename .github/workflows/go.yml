# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go
# ===================================================================
#  文件名：.github/workflows/go.yml
#  作用：1) CI  2) 打 tag 时自动构建多平台二进制并发布 Release
# ===================================================================
name: Go

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

jobs:
  # -----------------------------------------------------------------
  # 原来的 CI 任务：编译 + 测试
  # -----------------------------------------------------------------
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Install Fyne deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev \
                                  libxcursor-dev libxrandr-dev \
                                  libxinerama-dev libxi-dev

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

  # -----------------------------------------------------------------
  # 新增 Release 任务：只在打 tag 时运行
  # -----------------------------------------------------------------
  release:
    needs: build # 等 CI 通过后再发布
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Install Linux cross-build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1-mesa-dev libx11-dev libxrandr-dev libxxf86vm-dev \
            libxi-dev libxcursor-dev libxinerama-dev libxss-dev \
            pkg-config

      # 交叉编译三个平台
      - name: Build binaries
        run: |
          # 项目名默认用仓库名（去掉 owner/ 前缀）
          PROJECT_NAME="${GITHUB_REPOSITORY##*/}"

          # Linux
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o "${PROJECT_NAME}-linux-amd64" .
          # Windows
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o "${PROJECT_NAME}-windows-amd64.exe" .
          # macOS
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o "${PROJECT_NAME}-darwin-amd64" .

      # 一键创建 Release 并上传二进制
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *-linux-amd64
            *-windows-amd64.exe
            *-darwin-amd64
          generate_release_notes: true # 自动生成变更列表
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
